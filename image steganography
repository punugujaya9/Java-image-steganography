import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.*;

public class ImageSteganography {
    private static final Map<String, SecretKey> keyStorage = new HashMap<>();
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\n1. Encode\n2. Decode\n3. Exit\n");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    encode();
                    break;
                case 2:
                    decode();
                    break;
                case 3:
                    System.exit(0);
                default:
                    System.out.println("Please enter a valid choice.");
            }
        }
    }

    private static void encode() {
        try {
            System.out.print("Enter image file path: ");
            String filePath = scanner.nextLine();
            BufferedImage img = ImageIO.read(new File(filePath));

            SecretKey key = generateKey();
            String keyString = Base64.getEncoder().encodeToString(key.getEncoded());
            keyStorage.put(filePath, key);
            System.out.println("Generated key for encoding: " + keyString);

            System.out.print("Enter data to encode: ");
            String data = scanner.nextLine();
            byte[] encryptedData = encrypt(data, key);

            BufferedImage steganoImage = encodeImage(img, encryptedData);

            System.out.print("Enter output file path: ");
            String outputFilePath = scanner.nextLine();
            ImageIO.write(steganoImage, "png", new File(outputFilePath));

            System.out.println("Data encoded successfully.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void decode() {
        try {
            System.out.print("Enter image file path: ");
            String filePath = scanner.nextLine();
            BufferedImage img = ImageIO.read(new File(filePath));

            System.out.print("Enter key for decryption: ");
            String keyString = scanner.nextLine();
            SecretKey key = new SecretKeySpec(Base64.getDecoder().decode(keyString), "AES");

            byte[] extractedData = decodeImage(img);
            String decryptedData = decrypt(extractedData, key);

            System.out.println("Decoded Data: " + decryptedData);
        } catch (Exception e) {
            System.out.println("Invalid key! Please enter the correct key.");
        }
    }

    private static SecretKey generateKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128, new SecureRandom());
        return keyGen.generateKey();
    }

    private static byte[] encrypt(String data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));
    }

    private static String decrypt(byte[] data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, key);
        return new String(cipher.doFinal(data), StandardCharsets.UTF_8);
    }

    private static BufferedImage encodeImage(BufferedImage img, byte[] data) {
        int width = img.getWidth();
        int height = img.getHeight();
        BufferedImage encodedImage = new BufferedImage(width, height, img.getType());

        int dataIndex = 0;
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = img.getRGB(x, y);
                if (dataIndex < data.length) {
                    pixel = (pixel & 0xFFFFFF00) | (data[dataIndex] & 0xFF);
                    dataIndex++;
                }
                encodedImage.setRGB(x, y, pixel);
            }
        }
        return encodedImage;
    }

    private static byte[] decodeImage(BufferedImage img) {
        List<Byte> extractedData = new ArrayList<>();
        int width = img.getWidth();
        int height = img.getHeight();

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = img.getRGB(x, y);
                byte extractedByte = (byte) (pixel & 0xFF);
                extractedData.add(extractedByte);
            }
        }

        byte[] byteArray = new byte[extractedData.size()];
        for (int i = 0; i < extractedData.size(); i++) {
            byteArray[i] = extractedData.get(i);
        }
        return byteArray;
    }
}
